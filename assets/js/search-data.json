{
  
    
        "post0": {
            "title": "A* Cost function experimentation",
            "content": "A* Cost Function Experimentation . Introduction . For several years, I have participated in the Advent Of Code, a series of challenges in the month of december. This year, on day 15, the challenge required navigating a grid where each step had a certain costs between 0 and 9. It allowed me to try to solve the challenge using the A*-algorithm, a variation of Dijkstra’s Shortest Path Algorithm. . Part of the A-algorithm, where it deviates from Dijkstra’s is in determining a cost function where an estimation is made of the cost from a specific position to the end. A good cost function has the effect of “aiming” the algorithm more towards the goal, so it will no longer inspect all possible paths, but will prioritize paths that are closer and closer to the goal. This gives A the benefit of being faster than Dijkstra in big search spaces (because you no longer have to inspect all possible options), but it might not give the exact shortest path, since the most optimal path might require a bit of a detour. . Using this challenge, I have tried some experimentation on the cost function to see the effect on the algorithm, and tried to make the effect. . . The challenge . The challenge can be found on Advent of Code 2021, day 15. The gist is that a grid is provided with numbers that represent the “cost” of moving into that particular square. For example: . 1163751742 1381373672 2136511328 3694931569 7463417111 1319128137 1359912421 3125421639 1293138521 2311944581 . The actual puzzel input you get is bigger, and is a grid of 100x100 numbers. Now, the challenge is to find the shortest path (i.e. path with the least cost total) from the top-left to the bottom-right. . The A* Implementation . To get off to a flying start, below is my implementation of the A* algorithm. First I defined a new Node class to represent each square: . public class Node { public Node Parent { get; set; } public int X { get; set; } public int Y { get; set; } public int F =&gt; this.G + this.H; public int G { get; set; } public int H { get; set; } public int Value { get; set; } } . Each square in the grid is a Node, keeping track of its location, the values G, Hand F) that are important in the A* algorithm, its parent (Which can be used in the end to backtrack through the path that was found) and its value, which is just the cost of the square (the number in the puzzel input above) . The full solution has A* steps annotated in the code below. There are some rendering calls that just render a visual reprentation on the screen, and a Backtrack() function that loops through the path and adds up the costs. These can be ignored for this example. . public async Task Part1() { Node[][] grid = new Node[this.Input.Count()][]; // Parse the input to a 2d array of Nodes for (int row = 0; row &lt; this.Input.Count(); row++) { string line = this.Input.ElementAt(row); grid[row] = line.Select((x, i) =&gt; new Node { X = i, Y = row, Value = int.Parse(x.ToString()) }).ToArray(); } // A* // Init open/closed lists IList&lt;Node&gt; open = new List&lt;Node&gt;(); IList&lt;Node&gt; closed = new List&lt;Node&gt;(); // Define start and end nodes (int x, int y) start = (0, 0); (int x, int y) end = (grid[0].GetLength(0) - 1, grid.GetLength(0) - 1); // Add starting node to open open.Add(grid.SelectMany(g =&gt; g).Single(n =&gt; n.X == start.x &amp;&amp; n.Y == start.y)); RenderGrid(this.Input); // While open is not empty while (open.Any()) { // Get the current node with lowest F Node current = open.OrderBy(x =&gt; x.F).First(); RenderCurrent(current); // remove the currentNode from the openList // add the currentNode to the closedList open.Remove(current); closed.Add(current); // Check for goal if (current.X == end.x &amp;&amp; current.Y == end.y) { // Current node is the goal node. Backtrack through parants to find the path RenderGrid(this.Input); RenderPath(current); int cost = Backtrack(grid, current); answers.WriteLine($&quot;Answer Part 1: {cost}&quot;); break; } // Get children of current node IList&lt;Node&gt; children = Get4Children(grid, current); foreach (var child in children) { if (closed.Contains(child, new NodeComparer())) { // Node already visited, do nothing continue; } if (open.Contains(child, new NodeComparer())) { foreach (var openNode in open) { if ((openNode.X == child.X &amp;&amp; openNode.Y == child.Y) &amp;&amp; child.G &lt; openNode.G) { // this node has a lower G cost than the current node, set its parent to current openNode.Parent = current; } } } else { child.G = current.G + child.Value; // Cost of current to child // Cost function, this is a low estimate of current to the end. child.H = 0; //Dijkstra child.Parent = current; open.Add(child); } } } } . Of note for this post is the calculation of the H. This allows us to “steer” the algorithm. Now, lets’ experiment with the cost function and see what happens. . Dijkstra . child.H = 0; . Setting the Cost function to 0, or simple not doing any optimizations, the algorithm will basically execute Dijkstra’s algorithm and inspect all nodes. A visual representation looks like this: . . One can see that all nodes are being inspected (painted magenta), and the optimal path is found at the end. Because all nodes are checked. This will guarantee the actual shortest path, since all nodes are checked, but the algorithm also checks nodes that are way out of the way of the path. going from the top-left to the bottom-right, it is probably not needed to check if there is an optimal path that goes through the top-right or bottom-left. . Let’s try something else. . Manhattan-Distance . child.H = Math.Abs(end.x - child.X) + Math.Abs(end.y - child.Y); . One interpretation of the cost from any point to the end is the Manhattan distance. This is basically the number of steps you have to walk down and right to get from any point to the end. The Algorithm now looks like this: . . While there seems to be a little more emphasis on the algorithm to prioritize the bottom-right direction, it is not really noticable. One problem might be that the search space is relatively small. It is just a 100x100 box. Maybe we can add a factor to the cost to really emphasize the cost? . Manhattan-Distance with a factor . child.H = (Math.Abs(end.x - child.X) + Math.Abs(end.y - child.Y)) * factor; . Multiplying the cost by a factor maybe helps to offset this small search space and really force the algorithm in the direction we want. . Lets try a factor of 2: . . That definately looks like something! It completely skips the top-right! We still inspect the bottom-left, but it might just be lower numbers in general down there. . Maybe a factor of 3? . . That is very pronounced! We really skip a lot of the grid, and really focus on just checking interesting nodes that bring us closed to the end. Interesting are the branches that shoot out when a clump of nodes that looked promising at first suddenly had a higher cost than a new path that was found more in the direction of the goal. . Pythagoras with a factor . child.H = ((int)Math.Sqrt(Math.Pow(end.x - child.X, 2) + Math.Pow(end.y - child.Y, 2))) * factor; . Instead of using the Manhattan distance, which is an over-estimation, maybe Pythagoras works better? I have tried this with several factors and below are the results for factor 4: . . and factor 5: . . Now there is some real force pushing us to the bottom-right. It is so much faster! But did we really found the optimal path? . Conclusion . Playing with the cost function of the A* is a great way to optimize your pathfinding algorithm. The more powerful the function, the less of the search space needs to be inspected and the faster a result is gotten. However we forego the idea that we really have the most optimal path, the actual shortest path might be one we didn’t inspect. . As always, there is a trade-off between speed and correctness, so experiment and find the optimal solution! .",
            "url": "https://sjerrul.github.io/blog/algorithms/2021/12/15/a-star-cost-function-analysis.html",
            "relUrl": "/algorithms/2021/12/15/a-star-cost-function-analysis.html",
            "date": " • Dec 15, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://sjerrul.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Work Experience . Trifork, Eindhoven - Senior Software Engineer . 05/2019 – Heden . Trifork is a leading full service supplier of high-quality custom-built applications and end-to-end solutions. . Mirabeau, Eindhoven - Senior Solution Developer - . 05/2015 – 05/2019 . Working for NVM (Nederlandse Vereniging van Makelaars), maintaining exisiting landscape and implementing new solutions. Also working for Philips, developing behaviours for voice agents (Google Home and Alexa). . Capgemini, Utrecht - .NET Consultant . 09/2013 – 05/2015 . .NET consultant with team-lead role, and mentor for starting Young Professionals. Projects included working on the applicaiton landscape of Duo Zoetermeer, creating a portal for medal and accolade management for Ministry of Defence and developing crisis management software for the Dutch Rijksoverheid. . Blue Mango Interactive, Eindhoven - Software Developer . 02/2011 – 09/2013 . Front- and back-end development. ASP.NET C# MVC3 en 4, Linq, Entity Framework, HTML(5), CSS(3), JavaScript and various frameworks. Supporting and advising role regarding Conversion Maximization, A/B testing and innovation. . Education . Eindhoven University of Technology, Eindhoven (graduated) . 09/2005 – 03/2011 . Education: Innovation Sciences Master: Human-Technology Interaction . Linköping Universitet, Linköping, Sweden (completed) . 01/2009 – 07/2009 . Courses: Data mining, Association Analysis, Interactive Systems, Advanced Web Programming, Artificial Intelligence, Advanced Programming in C++ . Fontys Hogeschool Informatica, Eindhoven (graduated) . 09/2001 – 09/2005 . Education: Computer Science Master: Computer Science and Software Engineering . Varia . Languages . Dutch: Mother language | English: Fluent (Academisch English certified) | German/French/Swedish: Base knowledge | . Certificates . 11/2017 - Microsoft: Developing Microsoft Azure Solutions | 10/2015 - Sitecore: Sitecore XP 8.0 Website .NET Developer Certification | 05/2014 - Microsoft: Developing ASP.NET MVC 4 Web Applications | 02/2014 - Microsoft: Programming in HTML with Javascript and CSS3 | 10/2013 - Capgemini Academy: UML en Object Oriented Analysis | 03/2013 - Microsoft: Accessing Data with Microsoft .NET Framework 4 | 02/2013 - Microsoft: Windows Communication Foundation Development with Microsoft .NET Framework 4 | 12/2012 - Google: Google Analytics Individual Qualification | 10/2012 - Microsoft: Designing and Developing Web applications using Microsoft .NET Framework 4 | .",
          "url": "https://sjerrul.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sjerrul.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}